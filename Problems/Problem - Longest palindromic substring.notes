-=Algorithm=-

!Main!
--->1. #Initilize# "maxStringLength int" and "stringStartIndex int"
--->2. #Loop# through each "Char" in "String"
--->3. #Call# expandFromCenter "Function"
--->4. #return# "string" starting from "stringStartIndex" and ending with length "maxStringlength" //string[start:start+length]
!expandFromCenter!
--->1. #Loop# (Check "left index" and "right index" are within string bounds) "AND" ("left index" and "right index" of "string" are identical)
--->2. #Expand# "left" and "right index" if True //Remember from center, so l-- and r++
--->3. #Check# if the difference between "left" and "right index" are larger than "maxStringLength", if so change "maxStringLength" and "stringStartIndex"

#Time: O(N^2)    # // Each index is accessed twice, Once in Main and once in Expand from Center
#Space: O(1)     # // As we don't utilize any additional variables to store iterative memory

[python]
class Solution:
    def longestPalindrome(self, s: str) -> str:
        self.maxlen = 0
        self.start = 0

        for i in range(len(s)):
            self.expandFromCenter(s,i,i)
            self.expandFromCenter(s,i,i+1)
        return s[self.start:self.start+self.maxlen]


    def expandFromCenter(self,s,l,r):
        while l > -1 and r < len(s) and s[l] ==s[r]:
            l -= 1
            r += 1

        if self.maxlen < r-l-1:
            self.maxlen = r-l-1
            self.start = l + 1
[end]
