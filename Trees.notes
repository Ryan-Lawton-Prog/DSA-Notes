-= Definitions =-


!Pre-order Traversal
- Traverse starting at the root and navigating left to right

"Recursive Approach"
[python]
    def helper(root, res):
        res.append(root.val)
        if root.left is not None:
            helper(root.left, res)
        if root.right is not None:
            helper(root.right, res)
        
    res = []
    helper(root, res)
    return res
[end]
#Time O(n)
#Space O(n)

--->1. "Create" #List#
--->2. "Call" #Recursive# Function
--->3. "Append" #Node# Value
--->4. "Move" to Left #Node#
--->5. "Move" to Right #Node#

"Iterative Approach"
[python] 
    # Create a stack  and list of output
    stack, output = [root, ], []

    #loop through stack
    while stack:
        root = stack.pop() # get next node
        output.append(root.val) # append val
        if root.left is not None # check to add left Node
            stack.append(root.left)
        if root.right is not None # check to add right Node
            stack.append(root.right)
[end]
#Time O(n)
#Space O(n)

--->1. "Create" #Stack# and output #List#
--->2. "Loop" through #Stack# until empty
--->3. "Append" #Node# Value
--->4. "Add" Left #Node# to #Stack#
--->5. "Add" Right #Node# to #Stack# !FIN!



!In-order Traversal
- Traverse starting from the left then visit root followed by traversing right

"Recursive Approach"
[python]
    def helper(root: TreeNode, res: List[int]) -> None:
        if root is not None:
            if root.left is not None:
                helper(root.left, res)
            res.append(root.val)
            if root.right is not None:
                helper(root.right, res)

    res = []
    helper(root,res)
    return res
[end]
#Time O[n]
#Space O[n], averagae: O[log n]

--->1. "Create" #List#
--->2. "Call" #Recursive# Function
--->3. "Shift" to Left most #Node#
--->4. "Append" #Node# Value
--->5. "Shift" to Right most #Node#

"Iterative Approach"
[python]
    if not root:
        return
    res = []
    stack = []
    curr = root
    while curr is not None or stack:
        while curr is not None:
            stack.append(curr)
            curr = curr.left
        curr = stack.pop()
        res.append(curr.val)
        curr = curr.right
    return res
[end]
#Time O[n]
#Space O[n]

--->1. "Create" #Stack# and output #List#
--->2. "Loop" through #Stack# until empty
--->3. "Loop" until current #Node# is None
--->4. "Append" current #Node# to #Stack#
--->5. "Shift" current #Node# to the left !FIN!
--->6. "Pop" #Stack# and save to current #Node#
--->7. "Append" current #Node# value to output #List#
--->8. "Shift" current #Node# to the right !FIN!



!Post-order Traversal
- Traverse left then right subtree followed by the root
- Deletion of a node uses Post-order as you have to traverse all child nodes before you can delete the specified node

"Recursive Approach"
[python]
    res = []
    def helper(root):
        if root:
            helper(root.left)
            helper(root.right)
            res.append(root.val)
        return
    helper(root)
    return res
[end]
#Time O[n]
#Space Worst: O(n) Average: O(h) where h is the height of the tree

--->1. "Create" output #List#
--->2. "Call" Recursion
--->3. if #Root# not #None#
--->4. "Call" helper on left #Node#
--->5. "Call" helper on right #Node#
--->6. "Append" #Node# value to output #List#

"Iterative Approach"
[python]
    if not root: return None
    stack, res = [root,], []
    while stack:
        val = stack.pop()
        res.append(val.val)
        if val.left:
            stack.append(val.left)
        if val.right:
            stack.append(val.right)
    return res[::-1]    
[end]
#Time O[n]
#Space Worst: O(n) Average: O(h) where h is the height of the tree

--->1. "Create" #Stack# and output #List#
--->2. "Loop" through #Stack# until empty
--->3. "Append" #Node# Value
--->4. "Add" Left #Node# to #Stack#
--->5. "Add" Right #Node# to #Stack# !FIN!
--->6. "Reverse" #List#


!Level-order Traversal
- Traverse the tree one row at a Time
- BFS is the most common algorithm to accomplish this

"Recursive Approach"
[python]
    levels = []
        
    if not root: return levels
    
    def helper(root,row):
        if len(levels) == row:
            levels.append([])
            
        levels[row].append(root.val)
        
        if root.left:
            helper(root.left,row+1)
        if root.right:
            helper(root.right,row+1)
    helper(root,0)
    return levels
[end]
#Time O[n]
#Space Worst: O(n) Average: O(h) where h is the height of the tree

--->1. "Create" output #List#
--->2. "Call" recursive Function
--->3. "Add" new level to output #List# if row has been "Incremented"
--->4. "Append" root value to output #List#
--->5. "Call" helper on left #Node# if left exists
--->6. "Call" helper on right #Node# if right exists

"Iterative Approach"
[python]
    levels = []
    
    if not root:
        return levels
    
    level = 0
    queue = deque([root,])
    
    while queue:
        levels.append([])
        level_length = len(queue)
        
        for _ in range(level_length):
            node = queue.popleft()
            
            levels[level].append(node.val)
            
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        
        level += 1
    
    return levels
[end]
#Time O(n)
#Space O(n)